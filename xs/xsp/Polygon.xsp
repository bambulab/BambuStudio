%module{Slic3r::XS};

%{
#include <xsinit.h>
#include "libslic3r/BoundingBox.hpp"
#include "libslic3r/Polygon.hpp"
#include "libslic3r/BoundingBox.hpp"
%}

%name{Slic3r::Polygon} class Polygon {
    ~Polygon();
    Clone<Polygon> clone()
        %code{% RETVAL = THIS; %};
    SV* arrayref()
        %code{% RETVAL = to_AV(THIS); %};
    SV* pp()
        %code{% RETVAL = to_SV_pureperl(THIS); %};
    void scale(double factor);
    void translate(double x, double y);
    void reverse();
    Lines lines();
    Clone<Polyline> split_at_vertex(Point* point)
        %code{% RETVAL = THIS->split_at_vertex(*point); %};
    Clone<Polyline> split_at_index(int index);
    Clone<Polyline> split_at_first_point();
    Points equally_spaced_points(double distance);
    double length();
    double area();
    bool is_counter_clockwise();
    bool is_clockwise();
    bool make_counter_clockwise();
    bool make_clockwise();
    bool is_valid();
    Clone<Point> first_point();
    bool contains_point(Point* point)
        %code{% RETVAL = THIS->contains(*point); %};
    Polygons simplify(double tolerance);
    Polygons triangulate_convex()
        %code{% THIS->triangulate_convex(&RETVAL); %};
    Clone<Point> centroid();
    Clone<BoundingBox> bounding_box();
    Points concave_points(double angle);
    Points convex_points(double angle);
    Clone<Point> point_projection(Point* point)
        %code{% RETVAL = THIS->point_projection(*point); %};
    Clone<Point> intersection(Line* line)
        %code{%
            Point p;
            (void)THIS->intersection(*line, &p);
            RETVAL = p;
        %};
    Clone<Point> first_intersection(Line* line)
        %code{%
            Point p;
            (void)THIS->first_intersection(*line, &p);
            RETVAL = p;
        %};
%{

Polygon*
Polygon::new(...)
    CODE:
        RETVAL = new Polygon ();
        // ST(0) is class name, ST(1) is first point
        RETVAL->points.resize(items-1);
        for (unsigned int i = 1; i < items; i++) {
            from_SV_check(ST(i), &RETVAL->points[i-1]);
        }
    OUTPUT:
        RETVAL

void
Polygon::rotate(angle, center_sv)
    double  angle;
    SV*     center_sv;
    CODE:
        Point center;
        from_SV_check(center_sv, &center);
        THIS->rotate(angle, center);

%}
};
